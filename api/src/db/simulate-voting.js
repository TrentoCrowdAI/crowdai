/**
 * This file contains simulated votes that we can use
 * for testing Shortest Run integration. These votes
 * simulates baseline round.
 *
 */
const uuid = require('uuid/v4');

global.__base = __dirname + '/../';
const delegates = require(__base + 'delegates');
const db = require(__base + 'db');

let params = {
  votesPerItemFilter: 5,
  filtersNum: 3,
  itemsPerWorker: 6,
  baseroundItems: 8,
  workersNum: 6
};

const run = async () => {
  console.log('Generating records...');
  try {
    await db.query('BEGIN');
    let requester = await delegates.requesters.create({});

    // create project
    let res = await db.query(
      `insert into ${
        db.TABLES.Project
      }(created_at, data) values($1, $2) returning *`,
      [new Date(), {}]
    );
    const project = res.rows[0];

    // create job
    res = await db.query(
      `insert into ${
        db.TABLES.Job
      }(project_id, requester_id, uuid, created_at, data) values($1, $2, $3, $4, $5) returning *`,
      [
        project.id,
        requester.id,
        uuid(),
        new Date(),
        {
          name: 'Job generated by simulate-voting script'
        }
      ]
    );
    const job = res.rows[0];
    // create workers
    let workers = [];

    for (let i = 0; i < params.workersNum; i++) {
      let w = await delegates.workers.create(uuid());
      workers.push(w);
    }
    // create items
    let items = [];

    for (let i = 0; i < params.baseroundItems; i++) {
      let rsp = await db.query(
        `insert into ${
          db.TABLES.Item
        }(created_at, project_id, data) values($1, $2, $3) returning *`,
        [
          new Date(),
          project.id,
          {
            title: `Paper index ${i}`,
            description: `Paper index ${i}. description`
          }
        ]
      );
      items.push(rsp.rows[0]);
    }
    // create filters
    let filters = [];

    for (let i = 0; i < params.filtersNum; i++) {
      let rsp = await db.query(
        `insert into ${
          db.TABLES.Criterion
        }(created_at, project_id, data) values($1, $2, $3) returning *`,
        [
          new Date(),
          project.id,
          {
            label: `C${i + 1}`,
            description: `filter C${i + 1}`
          }
        ]
      );
      filters.push(rsp.rows[0]);
    }

    // create the votes entries
    let simulatedVotes = [
      [[0, 1], [1, 1], [2, 1], [3, 1], [4, 0], [5, 1]], // item 1, filter 1   [worker_id, vote] 1: in, 0: out
      [[0, 1], [1, 1], [2, 1], [3, 0], [4, 0], [5, 0]], // item 1, filter 2
      [[0, 1], [1, 0], [2, 0], [3, 1], [4, 1], [5, 1]], // item 1, filter 3
      [[0, 0], [1, 0], [2, 0], [3, 1], [4, 1], [5, 1]], // item 2, filter 1
      [[0, 1], [1, 1], [2, 1], [3, 0], [4, 0], [5, 0]], // item 2, filter 2
      [[0, 0], [1, 1], [2, 0], [3, 0], [4, 0], [5, 0]], // item 2, filter 3
      [[0, 0], [1, 1], [2, 1], [3, 0], [4, 1], [5, 1]], // ...
      [[0, 1], [1, 0], [2, 1], [3, 0], [4, 1], [5, 0]],
      [[0, 1], [1, 0], [2, 1], [3, 1], [4, 0], [5, 0]],
      [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 0]],
      [[0, 0], [1, 0], [2, 0], [3, 0], [4, 1], [5, 1]],
      [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]],
      [[4, 1], [5, 1], [6, 1], [7, 1], [8, 0], [9, 1]],
      [[4, 1], [5, 1], [6, 1], [7, 0], [8, 1], [9, 1]],
      [[4, 1], [5, 0], [6, 1], [7, 0], [8, 0], [9, 0]],
      [[4, 1], [5, 1], [6, 1], [7, 0], [8, 0], [9, 0]],
      [[4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1]],
      [[4, 0], [5, 0], [6, 1], [7, 0], [8, 0], [9, 1]],
      [[4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1]],
      [[4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 0]],
      [[4, 0], [5, 0], [6, 0], [7, 1], [8, 0], [9, 1]],
      [[4, 1], [5, 1], [6, 1], [7, 0], [8, 1], [9, 1]],
      [[4, 0], [5, 0], [6, 0], [7, 1], [8, 0], [9, 0]],
      [[4, 0], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1]]
    ];
    let currentItem = 0;
    let currentFilter = 0;

    for (let i = 0; i < simulatedVotes.length; i++) {
      let obj = simulatedVotes[i];
      let filter = filters[currentFilter];
      let item = items[currentItem];

      for (let j = 0; j < params.votesPerItemFilter; j++) {
        let src = obj[j];
        let worker = workers[src[0]];
        let vote = src[1];

        await delegates.tasks.createTask({
          end: new Date(),
          job_id: job.id,
          worker_id: worker.id,
          item_id: item.id,
          data: {
            item: {
              title: item.data.title,
              description: item.data.description
            },
            criteria: [
              {
                id: filter.id,
                label: filter.data.label,
                description: filter.data.description,
                workerAnswer: vote === 1 ? 'yes' : 'no'
              }
            ],
            answered: true
          }
        });
      }
      ++currentFilter;

      if (currentFilter === params.filtersNum) {
        currentFilter = 0;
        ++currentItem;
      }
    }
    await db.query('COMMIT');
    console.log('Records generated correctly.');
  } catch (error) {
    console.error(error);
    await db.query('ROLLBACK');
  }
};

run();
